{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled3.ipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"1JlbStw0SJAO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"2f49d5a4-771d-48df-e97f-9bc4eec61822","executionInfo":{"status":"ok","timestamp":1556729130286,"user_tz":-330,"elapsed":16872,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"cell_type":"code","source":["import os\n","if type(os.environ.get(\"DISPLAY\")) is not str or len(os.environ.get(\"DISPLAY\"))==0:\n","    !bash ../xvfb start\n","    %env DISPLAY=:1"],"execution_count":1,"outputs":[{"output_type":"stream","text":["bash: ../xvfb: No such file or directory\n","env: DISPLAY=:1\n"],"name":"stdout"}]},{"metadata":{"id":"xQm4SlEfSOl5","colab_type":"code","colab":{}},"cell_type":"code","source":["import gym\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","env = gym.make(\"MountainCar-v0\").env  #if you see \"<classname> has no attribute .env\", remove .env or update gym\n","env.reset()\n","n_actions = env.action_space.n\n","\n","#plt.imshow(env.render(\"rgb_array\"))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"eHGHw8mySuCu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"975f05d6-b990-47fb-a71b-fc9dfa8227be","executionInfo":{"status":"ok","timestamp":1556729412390,"user_tz":-330,"elapsed":1366,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"cell_type":"code","source":["#create agent\n","from sklearn.neural_network import MLPClassifier\n","agent = MLPClassifier(hidden_layer_sizes=(50,50),\n","                      activation='tanh',\n","                      warm_start=True, #keep progress between .fit(...) calls\n","                      max_iter=1 #make only 1 iteration on each .fit(...)\n","                     )\n","#initialize agent to the dimension of state an amount of actions\n","agent.fit([env.reset()]*n_actions, list(range(n_actions)));"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/neural_network/multilayer_perceptron.py:562: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (1) reached and the optimization hasn't converged yet.\n","  % self.max_iter, ConvergenceWarning)\n"],"name":"stderr"}]},{"metadata":{"id":"F4jK--OLS6FJ","colab_type":"code","colab":{}},"cell_type":"code","source":["def generate_session(t_max=1000):\n","    \n","    states,actions = [],[]\n","    total_reward = 0\n","    \n","    s = env.reset()\n","    \n","    for t in range(t_max):\n","        \n","        # a vector of action probabilities in current state\n","        probs = agent.predict_proba([s])[0] \n","        \n","        a = np.random.choice(n_actions,p=probs)#<sample action with such probabilities>\n","        \n","        new_s, r, done, info = env.step(a)\n","        \n","        #record sessions like you did before\n","        states.append(s)\n","        actions.append(a)\n","        total_reward += r\n","        \n","        s = new_s\n","        if done: break\n","    return states, actions, total_reward\n","\n","\n","        \n","def select_elites(states_batch,actions_batch,rewards_batch,percentile=50):\n","    \"\"\"\n","    Select states and actions from games that have rewards >= percentile\n","    :param states_batch: list of lists of states, states_batch[session_i][t]\n","    :param actions_batch: list of lists of actions, actions_batch[session_i][t]\n","    :param rewards_batch: list of rewards, rewards_batch[session_i][t]\n","    \n","    :returns: elite_states,elite_actions, both 1D lists of states and respective actions from elite sessions\n","    \n","    Please return elite states and actions in their original order \n","    [i.e. sorted by session number and timestep within session]\n","    \n","    If you're confused, see examples below. Please don't assume that states are integers (they'll get different later).\n","    \"\"\"\n","    \n","    reward_threshold = np.percentile(rewards_batch,percentile)#<Compute minimum reward for elite sessions. Hint: use np.percentile>\n","    bool_mask=rewards_batch>=reward_threshold\n","    #print(reward_threshold)\n","    #print(bool_mask)\n","    elite_states  = []\n","    elite_actions = []\n","    for i in range(len(rewards_batch)):\n","         if bool_mask[i]:\n","            elite_states.extend(states_batch[i]) #<your code here>\n","            elite_actions.extend(actions_batch[i])#<your code here>\n","    \n","    return elite_states,elite_actions\n","\n","\n","    \n","from IPython.display import clear_output\n","\n","def show_progress(batch_rewards, log, percentile, reward_range=[-990,+10]):\n","    \"\"\"\n","    A convenience function that displays training progress. \n","    No cool math here, just charts.\n","    \"\"\"\n","    \n","    mean_reward, threshold = np.mean(batch_rewards), np.percentile(batch_rewards, percentile)\n","    log.append([mean_reward, threshold])\n","\n","    clear_output(True)\n","    print(\"mean reward = %.3f, threshold=%.3f\"%(mean_reward, threshold))\n","    plt.figure(figsize=[8,4])\n","    plt.subplot(1,2,1)\n","    plt.plot(list(zip(*log))[0], label='Mean rewards')\n","    plt.plot(list(zip(*log))[1], label='Reward thresholds')\n","    plt.legend()\n","    plt.grid()\n","    \n","    plt.subplot(1,2,2)\n","    plt.hist(batch_rewards, range=reward_range);\n","    plt.vlines([np.percentile(batch_rewards, percentile)], [0], [100], label=\"percentile\", color='red')\n","    plt.legend()\n","    plt.grid()\n","\n","    plt.show()\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"WbqgeqDRS9vn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":303},"outputId":"8e324fe7-8072-4a09-a153-bb0b2c587481","executionInfo":{"status":"ok","timestamp":1556731795704,"user_tz":-330,"elapsed":8,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"cell_type":"code","source":["n_sessions = 100\n","percentile = 70\n","log = []\n","\n","for i in range(100):\n","    #generate new sessions\n","    sessions = [generate_session(t_max=10000) for i in range(n_sessions)]\n","    #print(sessions[99])\n","    batch_states,batch_actions,batch_rewards = map(np.array, zip(*sessions))\n","\n","    elite_states, elite_actions = select_elites(batch_states, batch_actions, batch_rewards, percentile)#<select elite actions just like before>\n","    #print(elite_states)\n","    agent.fit(elite_states, elite_actions)#<fit agent to predict elite_actions(y) from elite_states(X)>\n","\n","    show_progress(batch_rewards, log, percentile) #reward_range=[0,np.max(batch_rewards)])\n","    \n","    if np.mean(batch_rewards)> -150:\n","        print(\"You Win! You may stop training now via KeyboardInterrupt.\")"],"execution_count":12,"outputs":[{"output_type":"stream","text":["mean reward = -129.950, threshold=-111.000\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nQmCC\n","text/plain":["<Figure size 576x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["You Win! You may stop training now via KeyboardInterrupt.\n"],"name":"stdout"}]},{"metadata":{"id":"G-EhvbvBTcCh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":371},"outputId":"b98b3c69-7f27-4a22-d4f5-215e8945bf82","executionInfo":{"status":"error","timestamp":1556730290350,"user_tz":-330,"elapsed":3148,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"cell_type":"code","source":[""],"execution_count":6,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-19cef6297254>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgym\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"..\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mgrading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'grading'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"metadata":{"id":"aBHxtZofWdu5","colab_type":"code","colab":{}},"cell_type":"code","source":["#!/usr/bin/env python\n","# -*- coding: utf-8 -*-\n","import re\n","import requests\n","import json\n","\n","\n","class Grader(object):\n","    def __init__(self, assignment_key, all_parts=()):\n","        \"\"\"\n","        Assignment key is the way to tell Coursera which problem is being submitted.\n","        \"\"\"\n","        self.submission_page = \\\n","            'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'\n","        self.assignment_key = assignment_key\n","        self.answers = {part: None for part in all_parts}\n","\n","    def submit(self, email, token):\n","        submission = {\n","                    \"assignmentKey\": self.assignment_key,\n","                    \"submitterEmail\": email,\n","                    \"secret\": token,\n","                    \"parts\": {}\n","        }\n","        for part, output in self.answers.items():\n","            if output is not None:\n","                submission[\"parts\"][part] = {\"output\": output}\n","            else:\n","                submission[\"parts\"][part] = dict()\n","        request = requests.post(self.submission_page, data=json.dumps(submission))\n","        response = request.json()\n","        if request.status_code == 201:\n","            print('Submitted to Coursera platform. See results on assignment page!')\n","        elif u'details' in response and u'learnerMessage' in response[u'details']:\n","            print(response[u'details'][u'learnerMessage'])\n","        else:\n","            print(\"Unknown response from Coursera: {}\".format(request.status_code))\n","            print(response)\n","\n","    def set_answer(self, part, answer):\n","        \"\"\"Adds an answer for submission. Answer is expected either as string, number, or\n","           an iterable of numbers.\n","           Args:\n","              part - str, assignment part id\n","              answer - answer to submit. If non iterable, appends repr(answer). If string,\n","                is appended as provided. If an iterable and not string, converted to\n","                space-delimited repr() of members.\n","        \"\"\"\n","        if isinstance(answer, str):\n","            self.answers[part] = answer\n","        else:\n","            try:\n","                self.answers[part] = \" \".join(map(repr, answer))\n","            except TypeError:\n","                self.answers[part] = repr(answer)\n","\n","\n","def array_to_grader(array, epsilon=1e-4):\n","    \"\"\"Utility function to help preparing Coursera grading conditions descriptions.\n","    Args:\n","       array: iterable of numbers, the correct answers\n","       epslion: the generated expression will accept the answers with this absolute difference with\n","         provided values\n","    Returns:\n","       String. A Coursera grader expression that checks whether the user submission is in\n","         (array - epsilon, array + epsilon)\"\"\"\n","    res = []\n","    for element in array:\n","        if isinstance(element, int):\n","            res.append(\"[{0}, {0}]\".format(element))\n","        else:\n","            res.append(\"({0}, {1})\".format(element - epsilon, element + epsilon))\n","    return \" \".join(res)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gZPDXkfnXod9","colab_type":"code","colab":{}},"cell_type":"code","source":["import sys\n","import numpy as np\n","import gym\n","sys.path.append(\"..\")\n","#import grading\n","\n","\n","def submit_interface(policy, email, token):\n","    TIME_LIMIT = 250\n","    env = gym.wrappers.TimeLimit(gym.envs.classic_control.MountainCarEnv(),\n","                                max_episode_steps=TIME_LIMIT + 1)\n","    s = env.reset()\n","    actions = {'left': 0, 'stop': 1, 'right': 2}\n","\n","    for t in range(TIME_LIMIT):\n","        s, r, done, _ = env.step(policy(s, t))\n","        if done:\n","            break\n","    else:\n","        s = [-1]\n","    grader = Grader(\"3T7pSSz0EeifGhJb4HAv7A\")\n","    grader.set_answer(\"sDilm\", s[0])\n","    grader.submit(email, token)\n","\"\"\"\n","\n","def submit_taxi(generate_session, policy, email, token):\n","    sessions = [generate_session(policy) for _ in range(100)]\n","    _, _, session_rewards = zip(*sessions)\n","    session_rewards = np.array(session_rewards)\n","    grader = grading.Grader(\"s4pTlNbTEeeQvQ7N1-Sa3A\")\n","    grader.set_answer(\"GsMSL\", np.mean(session_rewards))\n","    grader.submit(email, token)\n","\n","\"\"\"\n","def submit_mountain_car(generate_session, email, token):\n","    sessions = [generate_session() for _ in range(100)]\n","    _, _, session_rewards = zip(*sessions)\n","    session_rewards = np.array(session_rewards)\n","    grader = Grader(\"EyYJW9bUEeeXyQ5ZPWKHGg\")\n","    grader.set_answer(\"mXDUE\", np.mean(session_rewards))\n","    grader.submit(email, token)\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"jF12hRqebOj3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"ef17bcc0-fb95-4046-baa0-c1ba2cc13128","executionInfo":{"status":"ok","timestamp":1556731819260,"user_tz":-330,"elapsed":6238,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"cell_type":"code","source":["submit_mountain_car(generate_session, \"ss.ghule@ncl.res.in\", \"QLIybYPkOsD7udSn\")"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Submitted to Coursera platform. See results on assignment page!\n"],"name":"stdout"}]},{"metadata":{"id":"SNICs7OdclwH","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}