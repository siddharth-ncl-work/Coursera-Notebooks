{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"practice_approx_qlearning","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"B6XosGagfBTx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"8c901afc-cc09-4065-ad12-5f782db6c1bf","executionInfo":{"status":"ok","timestamp":1557084818628,"user_tz":-330,"elapsed":3527,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"source":["import tensorflow as tf\n","import keras\n","import keras.layers as L\n","tf.reset_default_graph()\n","sess = tf.InteractiveSession()\n","keras.backend.set_session(sess)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"sog6SxonfH22","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":234},"outputId":"09e564f1-9c29-4de1-9565-8490859223fe","executionInfo":{"status":"error","timestamp":1557084818636,"user_tz":-330,"elapsed":3532,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"source":["network = keras.models.Sequential()\n","network.add(L.InputLayer(state_dim))\n","\n","# let's create a network for approximate q-learning following guidelines above\n","#<YOUR CODE: stack more layers!!!1 >\n","network.add(L.Dense(200,activation='relu'))\n","network.add(L.Dense(200,activation='relu'))\n","network.add(L.Dense(n_actions,activation='linear'))    "],"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-86f2a3cceb35>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnetwork\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSequential\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInputLayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate_dim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# let's create a network for approximate q-learning following guidelines above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#<YOUR CODE: stack more layers!!!1 >\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'state_dim' is not defined"]}]},{"cell_type":"code","metadata":{"id":"xWtCGapLfL24","colab_type":"code","colab":{}},"source":["def get_action(state, epsilon=0):\n","    \"\"\"\n","    sample actions with epsilon-greedy policy\n","    recap: with p = epsilon pick random action, else pick action with highest Q(s,a)\n","    \"\"\"\n","    \n","    q_values = network.predict(state[None])[0]\n","    \n","    ###YOUR CODE\n","    actions=np.arange(n_actions)\n","    action=np.random.choice([np.random.choice(actions),np.argmax(q_values)],p=[epsilon,1-epsilon])\n","    return action#<epsilon-greedily selected action>\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SM5TOQmhfMjM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"f4bcb936-fd03-427d-b81d-c251c6d84b62","executionInfo":{"status":"error","timestamp":1557084826163,"user_tz":-330,"elapsed":1092,"user":{"displayName":"Siddharth Ghule","photoUrl":"https://lh6.googleusercontent.com/-CRdt4DR4KLQ/AAAAAAAAAAI/AAAAAAAAM44/HF-YNi8zuAI/s64/photo.jpg","userId":"01016581137657955426"}}},"source":["assert network.output_shape == (None, n_actions), \"please make sure your model maps state s -> [Q(s,a0), ..., Q(s, a_last)]\"\n","assert network.layers[-1].activation == keras.activations.linear, \"please make sure you predict q-values without nonlinearity\"\n","\n","# test epsilon-greedy exploration\n","s = env.reset()\n","assert np.shape(get_action(s)) == (), \"please return just one action (integer)\"\n","for eps in [0., 0.1, 0.5, 1.0]:\n","    state_frequencies = np.bincount([get_action(s, epsilon=eps) for i in range(10000)], minlength=n_actions)\n","    best_action = state_frequencies.argmax()\n","    assert abs(state_frequencies[best_action] - 10000 * (1 - eps + eps / n_actions)) < 200\n","    for other_action in range(n_actions):\n","        if other_action != best_action:\n","            assert abs(state_frequencies[other_action] - 10000 * (eps / n_actions)) < 200\n","    print('e=%.1f tests passed'%eps)"],"execution_count":4,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-295311f2c5c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput_shape\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_actions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"please make sure your model maps state s -> [Q(s,a0), ..., Q(s, a_last)]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32massert\u001b[0m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactivation\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactivations\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"please make sure you predict q-values without nonlinearity\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# test epsilon-greedy exploration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/base_layer.py\u001b[0m in \u001b[0;36moutput_shape\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    916\u001b[0m         \"\"\"\n\u001b[1;32m    917\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inbound_nodes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 918\u001b[0;31m             raise AttributeError('The layer has never been called '\n\u001b[0m\u001b[1;32m    919\u001b[0m                                  'and thus has no defined output shape.')\n\u001b[1;32m    920\u001b[0m         all_output_shapes = set(\n","\u001b[0;31mAttributeError\u001b[0m: The layer has never been called and thus has no defined output shape."]}]},{"cell_type":"code","metadata":{"id":"mENSkpjRfOWW","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}